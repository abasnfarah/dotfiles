#!/bin/bash
echo "Starting bootstrapping.."
echo "..."
sleep .10

set -e

# Flag to only install dotfiles and not packages
flag="${1}"


# This gets the OS of current machine. 
MY_OS="$(uname -s)"

MY_DISTRO="none"

MY_ARCHITECTURE="none"

# Current working directory. We'll need to come back to this later
INITIAL_WORKING_DIRECTORY=$(pwd)

# Directory of install script
SCRIPT_DIRECTORY=$(dirname "$0")


###############################################################################
# Find OS and Distro Name
###############################################################################

function no_packages() {
cat << EOF
Can't install packages on this device.  Package installation is not supported on you OS or Distro

Please install any packages on your own. The list of of packages are located at:
    
    https://github.com/abasnfarah/dotfiles/blob/main/install

To install without packages, re-run the script with the following flag
    
    bash <(https://github.com/abasnfarah/dotfiles/blob/main)> --skip-packages
EOF
}

while test $# -gt 0; do
  case "$1" in 
    -h|--help)
      echo "install - installs dotfiles"
      echo "Defaults to installing list of packages"
      echo "Can skip pacakage install with -s flag"
      echo ""
      echo "install [options]"
      echo ""
      echo "options:"
      echo "-h, --help             show brief help"
      echo "-s, --skip_packages    skips package install"
      echo "-l, --list_packages    lists packages to install per OS"
      exit 0
      ;;

    -l)
      shift
      list_pacakges
      shift
      ;;
    --list_packages)
      list_pacakges
      shift
      ;;
    -s)
      shift
      shift
      ;;
    --skip_packages)
      echo "Skippiing package install"
      echo ""
      echo "To get a list of packages run 'install -l'"
      shift
      ;;
      



case $MY_OS in 
    Darwin*) 
        MY_OS="macOS" && MY_DISTRO="macOS"

        if [ -f "/opt" ]; then
            MY_ARCHITECTURE="ARM"
        else
            MY_ARCHITECTURE="x86_64"
        fi
        ;;
    Linux*) 
        MY_OS="Linux"
        
        if [ -f "/etc/arch-release" ]; then
            MY_DISTRO="Arch"
        else
            if  [ -f "/etc/debian_version" ]; then
                MY_DISTRO="Ubuntu"
            else
                [ -z "${skip_packages}" ] && no_packages
            fi
        fi
        ;;
    *)
        MY_OS="Other"
        [ -z "${skip_packages}" ] && no_packages
        
        ;;
esac

###############################################################################
# Install packages using OS or distro package manager
###############################################################################


function install_macos {
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/abasnfarah/dotfiles/HEAD/brew.sh)"
}

function install_arch {
    /bin/bash -c "$(curl -fLo https://raw.githubusercontent.com/abasnfarah/dotfiles/HEAD/arch.sh)"
}

function install_ubuntu { 
    /bin/bash -c "$(curl -fLo https://raw.githubusercontent.com/abasnfarah/dotfiles/HEAD/ubuntu.sh)"
}

echo "Your OS is $MY_OS"
echo "Your Distro is $MY_DISTRO"
if [ -f $MY_OS = "macOS" ]; then
    echo "Your Architecture is $MY_ARCHITECTURE"
fi

if [ -z "${skip_packages}" ] ; then 

    if [ $MY_OS = "macOS" ]; then 
        install_macos
    elif [ $MY_OS = "Linux"] && [ $MY_DISTRO = "Arch"]; then 
        install_arch
    elif [ $MY_OS = "Linux" ] && [ $MY_DISTRO = "Ubuntu" ]; then 
        install_ubuntu
    fi

fi

###############################################################################
# TODO: Installing dotfiles
###############################################################################

function create_dotfiles_path {
    
    if [ ! -d "$1" ]; then
        mkdir "$1"
    else 
        echo "$1 directory already exists"
    fi

}

# Gets the absolute path of dotfiles_path
read -rep $'\nWhere do you want your dotfiles to live [~/workspaces/dotfiles]? ' dotfiles_path
eval dotfiles_path="${dotfiles_path:-"${HOME}/workspaces/dotfiles"}"

if [ ! $MY_OS = "macOS" ]; then
    dotfiles_path=$(realpath $dotfiles_path)
fi

# Clone dotfiles to dotfiles_path
echo "Installing dotfiles to the following directory: $dotfiles_path"
git clone https://github.com/abasnfarah/dotfiles "$dotfiles_path"

###############################################################################
# Install Plug (vim plugin manager) 
###############################################################################

curl -fLo ${HOME}/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  
###############################################################################
# Install tpm (tmux plugin manager)
###############################################################################

git clone https://github.com/tmux-plugins/tpm ${HOME}/.tmux/plugins/tpm

###############################################################################
# Create symlinks for dotfiles 
###############################################################################

ln -fs "${dotfiles_path}/zsh/zshrc" "${HOME}/.zshrc"
ln -fs "${dotfiles_path}/zsh/local.zsh" "${HOME}/.local.zsh"
ln -fs "${dotfiles_path}/zsh/aliases.zsh" "${HOME}/.aliases.zsh"
ln -fs "${dotfiles_path}/vim/vimrc" "${HOME}/.vimrc"
ln -fs "${dotfiles_path}/tmux/tmux.conf" "${HOME}/.tmux.conf"
ln -fs "${dotfiles_path}/zsh/plugins/plugins.zsh" "${HOME}/.plugins.zsh"

if [ $MY_OS = "Linux" ]; then
    ln -fs "${dotfiles_path}/arch/.config/awesome/rc.lua" "${HOME}/.config/awesome/rc.lua"
    ln -fs "${dotfiles_path}/arch/.config/termite/config" "${HOME}/.config/termite/config"
    ln -fs "${dotfiles_path}/arch/.xinitrc" "${HOME}/.xinitrc"
fi


if [ ! -d "${HOME}/.ssh" ]; then
    mkdir "${HOME}/.ssh"
fi

ln -fs "${dotfiles_path}/ssh/config" "${HOME}/.ssh/config"


###############################################################################
# Installing awesome WM theme
###############################################################################

git clone --recurse-submodules --remote-submodules --depth 1 -j 2 https://github.com/lcpz/awesome-copycats.git
mv -bv awesome-copycats/{*,.[^.]*} ~/.config/awesome; rm -rf awesome-copycats

###############################################################################
# Installing vim plugins  
###############################################################################

echo "Installing Vim Plugins... "

vim -E +PlugInstall +qall || true


###############################################################################
# ur machine is a potato now 
###############################################################################

cat << EOF 
All dotfiles have been succesfully installed.

To checkout the dotfiles code and other goodies go here:

    https://github.com/abasnfarah/dotfiles

Time to get cracking!!
EOF


exit 0
